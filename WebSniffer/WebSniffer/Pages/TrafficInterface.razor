@page "/TrafficInterface/{ip}"
@using SharpPcap
@using PacketDotNet

<h2>@devicePorp[0]</h2>
<h3>@devicePorp[1]</h3>
<br />

<button class="btn btn-primary" @onlick="CaptureStart">Start Capture</button>
<br />
<button class="btn btn-primary" @onlick="CaptureStop">Stop Capture</button>

<br />

<table>
    <tr>
        <th>Packets</th>
    </tr>
    @if (packets != null)
    {
        foreach (var packet in packets)
        {
            <tr>
                <td>@packet</td>
            </tr>
        }
    }
</table>


@code {

    [Parameter]
    public string ip { get; set; }

    public static ICaptureDevice device { get; set; }
    public string[] devicePorp { get; set; }
    public static List<string> packets { get; set; }

    protected void CaptureStop()
    {
        var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
        devicePorp = parseDevice(device);
        if (device.Started)
        {
            device.StopCapture();
            device.Close();
        }
    }

    protected void CaptureStart()
    {
        packets = new List<string>();

        var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
        devicePorp = parseDevice(device);

        if (!device.Started)
        {
            device.Open();
            device.OnPacketArrival += Device_OnPacketArrival;
            device.Filter = "ip and tcp";
            device.StartCapture();
        }
    }

    private void Device_OnPacketArrival(object s, PacketCapture e)
    {
        var packet = Packet.ParsePacket(e.Device.LinkType, e.Data.ToArray());
        string tablePacket = packet.ToString().Replace("][", "]\n\n[");
        //if (packet != null && packet.PayloadPacket != null && packet.PayloadPacket.PayloadPacket != null &&
        //    packet.PayloadPacket.GetType() == typeof(IPv4Packet) &&
        //    packet.PayloadPacket.PayloadPacket.GetType() == typeof(TcpPacket))
        //{
        //    var ipv4 = (IPv4Packet)packet.PayloadPacket;
        //    var tcp = (TcpPacket)ipv4.PayloadPacket;

        //    tablePacket += ("\nFrom: ");
        //    try { tablePacket += Dns.GetHostEntry(ipv4.SourceAddress).HostName; }
        //    catch { tablePacket += ipv4.SourceAddress; }
        //    tablePacket += $" :{tcp.SourcePort}";

        //    tablePacket += "To: ";
        //    try { tablePacket += Dns.GetHostEntry(ipv4.DestinationAddress).HostName; }
        //    catch { tablePacket += ipv4.DestinationAddress; }
        //    tablePacket += $" :{tcp.DestinationPort}";
        //}
        System.Diagnostics.Debug.WriteLine(tablePacket);
        packets.Add(tablePacket);
    }

    protected override void OnInitialized()
    {
        if (ip != null)
        {
            var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
            devicePorp = parseDevice(device);
        }
    }


    protected string[] parseDevice(ICaptureDevice dev)
    {
        char[] separators = new char[] { '\n', ':' };
        string name = "";
        string ipAddress = "";

        string[] splitStr = dev.ToString().Split(separators);
        for (int i = 0; i < splitStr.Length; i++)
        {
            if (splitStr[i].Equals("FriendlyName"))
            {
                name = splitStr[i + 1].Trim();
            }
            else if (splitStr[i].Equals("Addr"))
            {
                if (splitStr[i + 1].Contains('.'))
                {
                    ipAddress = splitStr[i + 1].Trim();
                }
            }
        }
        if (name.Length == 0)
        {
            if (splitStr.Length > 7)
            {
                name = splitStr[4].Trim();
            }
        }
        if (name.Length == 0)
        {
            name = dev.ToString();
        }
        return new string[] { name, ipAddress };
    }
}
