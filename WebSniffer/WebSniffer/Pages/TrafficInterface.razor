@page "/TrafficInterface/{ip}"
@using SharpPcap
@using PacketDotNet
@using System.Net
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web;

<h2>@devicePorp[0]</h2>
<h3>@devicePorp[1]</h3>
<br />

<button class="btn btn-primary" type="submit" @onclick="CaptureStart">Start Capture</button>
<br />
<br />
<button class="btn btn-primary" type="submit" @onclick="CaptureStop">Stop Capture</button>
<br />
<br />

@if (packets != null)
{
<table class="table table-striped">
    <thead>
        <tr>
            <th>Time</th>
            <th>Packet</th>
            <th>Sender</th>
            <th>Receiver</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var packet in packets.ToList())
        {
            <tr>
                @if (packet.Ipv4Tcp)
                {
                    <td>@DateTime.Now.TimeOfDay</td>
                    <td>
                        @packet.basePacket
                    </td>
                    <td>
                        @packet.sender
                    </td>
                    <td>
                        @packet.receiver
                    </td>
                }
                else
                {
                    <td colspan="3">
                        @packet.basePacket
                    </td>                    
                }
            </tr>
        }
    </tbody>
    </table>
}

@code {
    public class TablePacket
    {
        
        public bool Ipv4Tcp { get; set; }
        public string basePacket { get; set; }
        public TablePacket(string packet)
        {
            Ipv4Tcp = false;
            basePacket = packet;
        }
        public TablePacket(string packet, string sender, string receiver)
        {
            Ipv4Tcp = true;
            basePacket = packet;
            this.sender = sender;
            this.receiver = receiver;
        }
        public string sender { get; set; }
        public string receiver { get; set; }
    }

    [Parameter]
    public string ip { get; set; }

    public static ICaptureDevice device { get; set; }
    public string[] devicePorp { get; set; }
    public static List<TablePacket> packets { get; set; }

    protected void CaptureStop()
    {
        var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
        devicePorp = parseDevice(device);
        if (device.Started)
        {
            device.StopCapture();
            device.Close();
        }
    }

    protected void CaptureStart()
    {
        packets = new List<TablePacket>();

        var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
        devicePorp = parseDevice(device);

        if (!device.Started)
        {
            device.Open();
            device.OnPacketArrival += Device_OnPacketArrival;
            device.Filter = "ip and tcp";
            device.StartCapture();
        }
    }

    private void Device_OnPacketArrival(object s, PacketCapture e)
    {
        var packet = Packet.ParsePacket(e.Device.LinkType, e.Data.ToArray());
        string tablePacket = packet.ToString().Replace("][", "]\n\n[");
        if (packet != null && packet.PayloadPacket != null && packet.PayloadPacket.PayloadPacket != null &&
            packet.PayloadPacket.GetType() == typeof(IPv4Packet) &&
            packet.PayloadPacket.PayloadPacket.GetType() == typeof(TcpPacket))
        {
            var ipv4 = (IPv4Packet)packet.PayloadPacket;
            var tcp = (TcpPacket)ipv4.PayloadPacket;

            string sender = "";
            try { sender += Dns.GetHostEntry(ipv4.SourceAddress).HostName; }
            catch { sender += ipv4.SourceAddress; }
            sender += $" :{tcp.SourcePort}";

            string receiver = "";
            try { receiver += Dns.GetHostEntry(ipv4.DestinationAddress).HostName; }
            catch { receiver += ipv4.DestinationAddress; }
            receiver += $" :{tcp.DestinationPort}";

            packets.Add(new TablePacket(tablePacket, sender, receiver));
        }
        else
        {
            packets.Add(new TablePacket(tablePacket));
        }

        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        if (ip != null)
        {
            var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
            devicePorp = parseDevice(device);
        }
    }


    protected string[] parseDevice(ICaptureDevice dev)
    {
        char[] separators = new char[] { '\n', ':' };
        string name = "";
        string ipAddress = "";

        string[] splitStr = dev.ToString().Split(separators);
        for (int i = 0; i < splitStr.Length; i++)
        {
            if (splitStr[i].Equals("FriendlyName"))
            {
                name = splitStr[i + 1].Trim();
            }
            else if (splitStr[i].Equals("Addr"))
            {
                if (splitStr[i + 1].Contains('.'))
                {
                    ipAddress = splitStr[i + 1].Trim();
                }
            }
        }
        if (name.Length == 0)
        {
            if (splitStr.Length > 7)
            {
                name = splitStr[4].Trim();
            }
        }
        if (name.Length == 0)
        {
            name = dev.ToString();
        }
        return new string[] { name, ipAddress };
    }
}
