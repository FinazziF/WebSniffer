@page "/TrafficInterface/{ip}"

@using SharpPcap
@using PacketDotNet
@using System.Net
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using System.IO;
@using Newtonsoft.Json;
@using System.Text;
@using Microsoft.JSInterop;

@inject IJSRuntime JS



        <h2>@devicePorp[0]</h2>
        <h3>@devicePorp[1]</h3>
        <br />
        <table class="table table-bordered" style=" text-align: center">
            <tr>
                <th>
                    <br />

                    <button class="btn btn-success" type="submit" @onclick="CaptureStart">Start Capture</button>
                    <br />

                    <br />
                    <form>
                        <div class="form-group">
                            Number of packets shown
                            <input @bind="maxNumPackets" />
                        </div>
                    </form>

                    <div>
                        Only Show Ip and Tcp Traffic:
                        <input type="checkbox" @bind="@onlyTcpIp" />
                    </div>
                    <br />
                    <button class="btn btn-primary" type="submit" @onclick="JsonList">
                        Download Capture <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cloud-download" viewBox="0 0 16 16">
                            <path d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z" />
                            <path d="M7.646 15.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 14.293V5.5a.5.5 0 0 0-1 0v8.793l-2.146-2.147a.5.5 0 0 0-.708.708l3 3z" />
                        </svg>
                    </button>
                    <br />
                </th>
                <th style="vertical-align : middle" rowspan="2">

                    <button class="btn btn-danger" type="submit" @onclick="CaptureStop">Stop Capture</button>

                </th>
            </tr>
        </table>

        @if (packetQueue != null)
        {
            <div style="height: 50rem; overflow: auto; table-layout: fixed">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Packet</th>
                            <th>Sender</th>
                            <th>Receiver</th>
                            <th>Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var packet in ReverseQueue())
                        {
                            <tr>
                                @if (packet.Ipv4Tcp)
                                {
                                    <td>@packet.id</td>
                                    <td>
                                        @packet.basePacket
                                    </td>
                                    <td>
                                        @packet.sender
                                    </td>
                                    <td>
                                        @packet.receiver
                                    </td>
                                    <td>@DateTime.Now.TimeOfDay</td>
                                }
                                else
                                {
                                    <td>@packet.id</td>
                                    <td>
                                        @packet.basePacket
                                    </td>
                                    <td>
                                        Not available
                                    </td>
                                    <td>
                                        Not available
                                    </td>
                                    <td>@DateTime.Now.TimeOfDay</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
   

@code {
    
    public class TablePacket
    {
        public int id { get; set; }
        public bool Ipv4Tcp { get; set; }
        public string basePacket { get; set; }
        public TablePacket(string packet, int id)
        {
            Ipv4Tcp = false;
            basePacket = packet;
            this.id = id;
        }
        public TablePacket(string packet, string sender, string receiver, int id)
        {
            Ipv4Tcp = true;
            basePacket = packet;
            this.sender = sender;
            this.receiver = receiver;
            this.id = id;
        }
        public string sender { get; set; }
        public string receiver { get; set; }
    }

    public List<TablePacket> ReverseQueue()
    {
        return packetQueue.Reverse<TablePacket>().ToList();
    }

    protected bool onlyTcpIp { get; set; }
    [Parameter]
    public string ip { get; set; }

    public int packetCount { get; set; }
    public int maxNumPackets { get; set; }
    public static ICaptureDevice device { get; set; }
    public string[] devicePorp { get; set; }
    public static List<TablePacket> packets { get; set; }
    public static Queue<TablePacket> packetQueue { get; set; }

    protected async Task JsonList()
    {
        var list = ReverseQueue();
        if (list.Any())
        {
            Encoding u8 = Encoding.UTF8;
            var a = JsonConvert.SerializeObject(list, Formatting.Indented).ToString();
            var byteArr = JsonConvert.SerializeObject(list, Formatting.Indented).ToString().ToList().Select(c => (byte)c).ToArray();

            await JS.InvokeVoidAsync("downloadFile", "text/plain", Convert.ToBase64String(byteArr), "packetCapture.json");
        }
    }

    protected void CaptureStop()
    {
        var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
        devicePorp = parseDevice(device);
        if (device.Started)
        {
            device.StopCapture();
            device.Close();
        }
    }

    protected void CaptureStart()
    {
        packets = new List<TablePacket>();
        packetQueue = new Queue<TablePacket>();
        packetCount = 0;
        if (maxNumPackets != 0)
        {

            var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
            devicePorp = parseDevice(device);

            if (!device.Started)
            {
                device.Open();
                device.OnPacketArrival += Device_OnPacketArrival;
                if (onlyTcpIp)
                    device.Filter = "ip and tcp";
                device.StartCapture();
            }
        }
    }

    private void Device_OnPacketArrival(object s, PacketCapture e)
    {
        packetCount++;
        var packet = Packet.ParsePacket(e.Device.LinkType, e.Data.ToArray());
        string tablePacket = packet.ToString().Replace("][", "]\n\n[");
        if (packet != null && packet.PayloadPacket != null && packet.PayloadPacket.PayloadPacket != null &&
            packet.PayloadPacket.GetType() == typeof(IPv4Packet) &&
            packet.PayloadPacket.PayloadPacket.GetType() == typeof(TcpPacket))
        {
            var ipv4 = (IPv4Packet)packet.PayloadPacket;
            var tcp = (TcpPacket)ipv4.PayloadPacket;

            string sender = "";
            try { sender += Dns.GetHostEntry(ipv4.SourceAddress).HostName; }
            catch { sender += ipv4.SourceAddress; }
            sender += $" :{tcp.SourcePort}";

            string receiver = "";
            try { receiver += Dns.GetHostEntry(ipv4.DestinationAddress).HostName; }
            catch { receiver += ipv4.DestinationAddress; }
            receiver += $" :{tcp.DestinationPort}";

            PushPopPackets(new TablePacket(tablePacket, sender, receiver, packetCount));
        }
        else
        {
            PushPopPackets(new TablePacket(tablePacket, packetCount));
        }

        InvokeAsync(StateHasChanged);
    }

    protected void PushPopPackets(TablePacket tPacket)
    {
        if (packetQueue.Count() > maxNumPackets - 1)
        {
            packetQueue.Dequeue();
        }
        packetQueue.Enqueue(tPacket);
    }

    protected override void OnInitialized()
    {
        if (ip != null)
        {
            var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
            devicePorp = parseDevice(device);
        }
    }

    protected string[] parseDevice(ICaptureDevice dev)
    {
        char[] separators = new char[] { '\n', ':' };
        string name = "";
        string ipAddress = "";

        string[] splitStr = dev.ToString().Split(separators);
        for (int i = 0; i < splitStr.Length; i++)
        {
            if (splitStr[i].Equals("FriendlyName"))
            {
                name = splitStr[i + 1].Trim();
            }
            else if (splitStr[i].Equals("Addr"))
            {
                if (splitStr[i + 1].Contains('.'))
                {
                    ipAddress = splitStr[i + 1].Trim();
                }
            }
        }
        if (name.Length == 0)
        {
            if (splitStr.Length > 7)
            {
                name = splitStr[4].Trim();
            }
        }
        if (name.Length == 0)
        {
            name = dev.ToString();
        }
        return new string[] { name, ipAddress };
    }
}

