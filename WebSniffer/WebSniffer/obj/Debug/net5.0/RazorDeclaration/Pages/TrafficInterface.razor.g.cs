// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebSniffer.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 3 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using SharpPcap;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using PacketDotNet;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/TrafficInterface/{ip}")]
    public partial class TrafficInterface : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 110 "D:\Progetti\WebSniffer\WebSniffer\WebSniffer\Pages\TrafficInterface.razor"
       
    
    public class TablePacket
    {
        public int id { get; set; }
        public bool Ipv4Tcp { get; set; }
        public string basePacket { get; set; }
        public TablePacket(string packet, int id)
        {
            Ipv4Tcp = false;
            basePacket = packet;
            this.id = id;
        }
        public TablePacket(string packet, string sender, string receiver, int id)
        {
            Ipv4Tcp = true;
            basePacket = packet;
            this.sender = sender;
            this.receiver = receiver;
            this.id = id;
        }
        public string sender { get; set; }
        public string receiver { get; set; }
    }

    public List<TablePacket> ReverseQueue()
    {
        return packetQueue.Reverse<TablePacket>().ToList();
    }

    protected bool onlyTcpIp { get; set; }
    [Parameter]
    public string ip { get; set; }

    public int packetCount { get; set; }
    public int maxNumPackets { get; set; }
    public static ICaptureDevice device { get; set; }
    public string[] devicePorp { get; set; }
    public static List<TablePacket> packets { get; set; }
    public static Queue<TablePacket> packetQueue { get; set; }

    protected async Task JsonList()
    {
        var list = ReverseQueue();
        if (list.Any())
        {
            Encoding u8 = Encoding.UTF8;
            var a = JsonConvert.SerializeObject(list, Formatting.Indented).ToString();
            var byteArr = JsonConvert.SerializeObject(list, Formatting.Indented).ToString().ToList().Select(c => (byte)c).ToArray();

            await JS.InvokeVoidAsync("downloadFile", "text/plain", Convert.ToBase64String(byteArr), "packetCapture.json");
        }
    }

    protected void CaptureStop()
    {
        var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
        devicePorp = parseDevice(device);
        if (device.Started)
        {
            device.StopCapture();
            device.Close();
        }
    }

    protected void CaptureStart()
    {
        packets = new List<TablePacket>();
        packetQueue = new Queue<TablePacket>();
        packetCount = 0;
        if (maxNumPackets != 0)
        {

            var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
            devicePorp = parseDevice(device);

            if (!device.Started)
            {
                device.Open();
                device.OnPacketArrival += Device_OnPacketArrival;
                if (onlyTcpIp)
                    device.Filter = "ip and tcp";
                device.StartCapture();
            }
        }
    }

    private void Device_OnPacketArrival(object s, PacketCapture e)
    {
        packetCount++;
        var packet = Packet.ParsePacket(e.Device.LinkType, e.Data.ToArray());
        string tablePacket = packet.ToString().Replace("][", "]\n\n[");
        if (packet != null && packet.PayloadPacket != null && packet.PayloadPacket.PayloadPacket != null &&
            packet.PayloadPacket.GetType() == typeof(IPv4Packet) &&
            packet.PayloadPacket.PayloadPacket.GetType() == typeof(TcpPacket))
        {
            var ipv4 = (IPv4Packet)packet.PayloadPacket;
            var tcp = (TcpPacket)ipv4.PayloadPacket;

            string sender = "";
            try { sender += Dns.GetHostEntry(ipv4.SourceAddress).HostName; }
            catch { sender += ipv4.SourceAddress; }
            sender += $" :{tcp.SourcePort}";

            string receiver = "";
            try { receiver += Dns.GetHostEntry(ipv4.DestinationAddress).HostName; }
            catch { receiver += ipv4.DestinationAddress; }
            receiver += $" :{tcp.DestinationPort}";

            PushPopPackets(new TablePacket(tablePacket, sender, receiver, packetCount));
        }
        else
        {
            PushPopPackets(new TablePacket(tablePacket, packetCount));
        }

        InvokeAsync(StateHasChanged);
    }

    protected void PushPopPackets(TablePacket tPacket)
    {
        if (packetQueue.Count() > maxNumPackets - 1)
        {
            packetQueue.Dequeue();
        }
        packetQueue.Enqueue(tPacket);
    }

    protected override void OnInitialized()
    {
        if (ip != null)
        {
            var device = CaptureDeviceList.Instance.First(x => parseDevice(x)[1] == ip);
            devicePorp = parseDevice(device);
        }
    }

    protected string[] parseDevice(ICaptureDevice dev)
    {
        char[] separators = new char[] { '\n', ':' };
        string name = "";
        string ipAddress = "";

        string[] splitStr = dev.ToString().Split(separators);
        for (int i = 0; i < splitStr.Length; i++)
        {
            if (splitStr[i].Equals("FriendlyName"))
            {
                name = splitStr[i + 1].Trim();
            }
            else if (splitStr[i].Equals("Addr"))
            {
                if (splitStr[i + 1].Contains('.'))
                {
                    ipAddress = splitStr[i + 1].Trim();
                }
            }
        }
        if (name.Length == 0)
        {
            if (splitStr.Length > 7)
            {
                name = splitStr[4].Trim();
            }
        }
        if (name.Length == 0)
        {
            name = dev.ToString();
        }
        return new string[] { name, ipAddress };
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JS { get; set; }
    }
}
#pragma warning restore 1591
